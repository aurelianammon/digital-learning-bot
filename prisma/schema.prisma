// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum JobType {
  TEXT
  IMAGE
  VIDEO
  PROMPT
}

model Job {
  id        String   @id @default(cuid())
  type      JobType
  message   String
  date      DateTime
  state     Boolean  @default(true)
  botId     String?  // Optional bot relationship
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bot   Bot?    @relation(fields: [botId], references: [id], onDelete: SetNull)
  files File[]  // Files associated with this job

  @@map("jobs")
}

model Message {
  id        String   @id @default(cuid())
  role      String   // "user" or "assistant"
  content   String
  botId     String?  // Optional bot relationship
  createdAt DateTime @default(now())

  // Relations
  bot Bot? @relation(fields: [botId], references: [id], onDelete: SetNull)

  @@map("messages")
}


model File {
  id           String   @id @default(cuid())
  filename     String   // Unique filename on disk
  originalName String   // Original filename from user
  type         String   // "image" or "video"
  path         String
  jobId        String?  // Optional job relationship
  createdAt    DateTime @default(now())

  // Relations
  job Job? @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Bot {
  id          String   @id @default(cuid())
  name        String   @default("assistant")
  openaiKey   String?  // OpenAI API key
  model       String?  @default("gpt-4-1106-preview") // OpenAI completion model
  context     String?  // Bot-specific context/personality
  isActive    Boolean  @default(true)
  // Single chat per bot
  linkedChatId String? @unique // Telegram chat ID
  linkedAt     DateTime? // When the chat was linked
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  jobs        Job[]
  messages    Message[]

  @@map("bots")
}

model PendingLink {
  id      String   @id @default(cuid())
  chatId  String   // Telegram chat ID
  pin     String   // 6-digit PIN
  expiresAt DateTime // PIN expiration time
  createdAt DateTime @default(now())

  @@map("pending_links")
}

